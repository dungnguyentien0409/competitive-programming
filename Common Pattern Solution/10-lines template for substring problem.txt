Link: https://leetcode.com/problems/minimum-window-substring/discuss/26808/here-is-a-10-line-template-that-can-solve-most-substring-problems

1. Use two pointers: start and end to represent a window.
2. Move end to find a valid window.
3. When a valid window is found, move start to find a smaller window.

int findSubstring(string s){
	vector<int> map(128,0);
	int counter; // check whether the substring is valid
	int begin=0, end=0; //two pointers, one point to tail and one  head
	int d; //the length of substring

	for() { /* initialize the hash map here */ }

	while(end<s.size()){

		if(map[s[end++]]-- ?){  /* modify counter here */ }

		while(/* counter condition */){ 
			 
			 /* update d here if finding minimum*/

			//increase begin to make it invalid/valid again
			
			if(map[s[begin++]]++ ?){ /*modify counter here*/ }
		}  

		/* update d here if finding maximum*/
	}
	return d;
}

Problem: 
3. Longest Substring Without Repeating Characters
76. Minimum Window Substring
159. Longest Substring with At Most Two Distinct Characters
340. Longest Substring with At Most K Distinct Characters
395. Longest Substring with At Least K Repeating Characters
567. Permutation in String
1248. Count Number of Nice Subarrays